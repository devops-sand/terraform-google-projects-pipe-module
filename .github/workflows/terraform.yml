name: "Terraform CI"

on:
  push:
    branches:
    - master # This workflow will trigger on push to master
  pull_request: # This workflow will also trigger on pull requests

env:
  TF_CLOUD_ORGANIZATION: "aether-default" # Environment variable for Terraform Cloud organization
  TF_WORKSPACE: "tarot-dev" # Environment variable for Terraform workspace
  CONFIG_DIRECTORY: "./" # Environment variable for directory containing Terraform configuration

permissions:
  contents: read
  pull-requests: write

defaults:
  run:
    shell: bash

jobs:
  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # Secret token for Terraform Cloud

      - name: Terraform Init
        run: terraform init # Initialize Terraform

  terraform-plan:
    name: "Terraform Plan"
    needs: terraform-init # This job depends on terraform-init job
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        run: terraform fmt -check # Check Terraform formatting

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          token: ${{ secrets.TF_API_TOKEN }}
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true # Perform a speculative plan

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          token: ${{ secrets.TF_API_TOKEN }}
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }} # Use the configuration version from the previous step
          plan_only: true # Only perform a plan, not an apply

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          token: ${{ secrets.TF_API_TOKEN }}
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }} # Get the plan ID from the payload of the previous step
      outputs:
        payload: ${{ steps.plan-run.outputs.payload }} # Make the payload output available to the 'Terraform Discard' job

  terraform-discard:
    name: "Terraform Discard"
    needs: terraform-plan # This job depends on terraform-plan job
    runs-on: ubuntu-latest
    environment: production
    if: ${{ needs.terraform-plan.result == 'failure' }} # Run this job only if 'Terraform Plan' job fails

    steps:
      - name: Discard Run
        uses: hashicorp/tfc-workflows-github/actions/discard-run@v1.0.0
        with:
          token: ${{ secrets.TF_API_TOKEN }}
          workspace: ${{ env.TF_WORKSPACE }}
          run: ${{ fromJSON(needs.terraform-plan.outputs.payload).data.id }} # Get the run ID from the payload of the terraform-plan job and discard the run
